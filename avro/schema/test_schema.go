// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     test.avsc
 */

package schema

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

type TestSchema struct {
	Name string

	Age int32
}

func NewTestSchema() *TestSchema {
	return &TestSchema{}
}

func DeserializeTestSchema(r io.Reader) (*TestSchema, error) {
	t := NewTestSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeTestSchemaFromSchema(r io.Reader, schema string) (*TestSchema, error) {
	t := NewTestSchema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeTestSchema(r *TestSchema, w io.Writer) error {
	var err error

	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}

	err = vm.WriteInt(r.Age, w)
	if err != nil {
		return err
	}

	return err
}

func (r *TestSchema) Serialize(w io.Writer) error {
	return writeTestSchema(r, w)
}

func NewTestSchemaWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := NewTestSchema()
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func (r *TestSchema) Schema() string {
	return "{\"fields\":[{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Age\",\"type\":\"int\"}],\"name\":\"TestSchema\",\"type\":\"record\"}"
}

func (r *TestSchema) SchemaName() string {
	return "TestSchema"
}

func (_ *TestSchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *TestSchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *TestSchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *TestSchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *TestSchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *TestSchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *TestSchema) SetString(v string)   { panic("Unsupported operation") }
func (_ *TestSchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TestSchema) Get(i int) types.Field {
	switch i {

	case 0:

		return (*types.String)(&r.Name)

	case 1:

		return (*types.Int)(&r.Age)

	}
	panic("Unknown field index")
}

func (r *TestSchema) SetDefault(i int) {
	switch i {

	}
	panic("Unknown field index")
}

func (_ *TestSchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *TestSchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *TestSchema) Finalize()                        {}

// container reader
type TestSchemaReader struct {
	r io.Reader
	p *vm.Program
}

func NewTestSchemaReader(r io.Reader) (*TestSchemaReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewTestSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &TestSchemaReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r TestSchemaReader) Read() (*TestSchema, error) {
	t := NewTestSchema()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
